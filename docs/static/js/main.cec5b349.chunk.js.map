{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","components/LoadingStatus.jsx","helpers/getGifs.js","components/GifGrid.jsx","hooks/useFetchCategory.js","components/CategoryList.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","categories","setCategories","useState","newCategory","setNewCategory","onSubmit","e","preventDefault","length","type","onChange","target","value","GifGridItem","id","title","url","className","src","alt","LoadingStatus","isLoading","getGifs","categoryName","a","encodeURI","fetch","resultData","json","data","gifs","map","img","images","downsized_medium","GifGrid","category","loading","state","setState","useEffect","then","fetchedData","catch","err","useFetchCategory","CategoryList","i","reverse","GifExpertApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAgCeA,EA7BK,SAAC,GAAmC,EAAlCC,WAAmC,IAAtBC,EAAqB,EAArBA,cAAqB,EAEdC,mBAAS,IAFK,mBAE7CC,EAF6C,KAEhCC,EAFgC,KAiBpD,OACI,uBAAMC,SANW,SAACC,GAClBA,EAAEC,iBARCJ,EAAYK,OAAS,IACpBP,GAAc,SAAAD,GAAU,4BAAQA,GAAR,CAAoBG,OAC5CC,EAAe,MAWnB,UACI,8CACA,uBAAOK,KAAK,OAAOC,SAVR,SAACJ,GAAD,OAAOF,EAAeE,EAAEK,OAAOC,QAUDA,MAAOT,Q,QCN7CU,EAdK,SAAC,GAAsB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAQC,EAAS,EAATA,IAC9B,OACI,qBAAKC,UAAU,8CAAf,SACI,qBAAKC,IAAKF,EAAKG,IAAKJ,OCIjBK,EARO,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACpB,OACI,qBAAKJ,UAAU,UAAf,SACKI,GAAa,qBAAKH,IAA8B,gBAAkBC,IAAI,mB,uBCLtEG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfR,EADe,iDACiCS,UAAUF,GAD3C,8DAEKG,MAAMV,GAFX,cAEfW,EAFe,gBAGAA,EAAWC,OAHX,uBAGdC,EAHc,EAGdA,KAGCC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAKgB,EAAIC,OAAOC,iBAAiBlB,QAVtB,kBAaZc,GAbY,4CAAH,sDC2BLK,EAnBC,SAAC,GAAoB,IAAnBZ,EAAkB,EAAlBA,aAAkB,ECNJ,SAACa,GAAc,IAAD,EAEhBlC,mBAAS,CAC/B2B,KAAK,GACLQ,SAAS,IAJ6B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAkB1C,OAZAC,qBAAU,WACNlB,EAAQc,GACHK,MAAK,SAAAC,GACFH,EAAS,CAACV,KAAMa,EAAaL,SAAS,OAEzCM,OAAM,SAAAC,GACHL,EAAS,CAACF,SAAS,EAAQR,KAAM,UAGzC,CAACO,IAGEE,EDX2BO,CAAiBtB,GAAtCU,EADmB,EACxBJ,KAAcQ,EADU,EACVA,QACtB,OACI,eAAC,WAAD,WACI,qBAAIpB,UAAU,oCAAd,UAAmDM,EAAnD,SAEA,cAAC,EAAD,CAAeF,UAAWgB,IAC1B,qBAAKpB,UAAU,YAAf,SACKgB,EAAOF,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,eAA+BA,GAAZA,EAAIlB,aEK3CgC,EAjBM,SAAC,GAAkB,IAAjB9C,EAAgB,EAAhBA,WAEnB,OACQ,8BAEIA,EAAW+B,KAAK,SAACK,EAAWW,GACxB,OAAO,cAAC,EAAD,CAAiCxB,aAAca,GAA/C,mBAA0BW,OAC9BC,aCKRC,EAZM,WAAO,IAAD,EACa/C,mBAAS,CAAC,OAAS,SAAW,cAD3C,mBAChBF,EADgB,KACJC,EADI,KAEvB,OACI,eAAC,WAAD,WACI,gDACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,cAAC,EAAD,CAAcD,WAAYA,QCLtCkD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cec5b349.chunk.js","sourcesContent":["import React ,{ useState }from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({categories,  setCategories } ) => {\n    \n    const [newCategory, setNewCategory] = useState(\"\")\n\n    const addCategory = () => {\n        if(newCategory.length > 0 ) {\n            setCategories(categories => [...categories, newCategory])\n            setNewCategory('');\n        }\n    }\n    const handleText = (e) => setNewCategory(e.target.value);\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        addCategory();\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <h3>Add Category</h3>\n            <input type=\"Text\" onChange={handleText} value={newCategory} />\n            {/* <button onClick={addCategory}> Add </button> */}\n        </form>\n    )\n}\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst GifGridItem = ({id, title , url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeInLeft \">\n            <img src={url} alt={title} />  \n        </div>\n    )\n}\n\nGifGridItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    title:PropTypes.string.isRequired,\n    url:PropTypes.string.isRequired\n}\n\nexport default GifGridItem\n","import React from 'react'\n\nconst LoadingStatus = ({isLoading}) => {\n    return (\n        <div className=\"loading\">\n            {isLoading && <img src={process.env.PUBLIC_URL + '/loading2.gif' } alt=\"cargando...\" />  } \n        </div>\n    )\n}\n\nexport default LoadingStatus\n","export const getGifs = async (categoryName)  => {\n    let url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoryName)}&limit=3&api_key=TFXsAe7d734cHSvMPx91dRQmaRepQ4mK`\n    let resultData  = await fetch(url)\n    let {data} = await resultData.json();\n    \n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n    return gifs;\n\n}","import React  , {Fragment} from 'react'\nimport PropTypes from 'prop-types'\n\nimport GifGridItem from './GifGridItem'\nimport LoadingStatus from './LoadingStatus'\n\nimport {useFetchCategory} from '../hooks/useFetchCategory'\n\nconst GifGrid = ({categoryName}) => {\n    const { data:images , loading } = useFetchCategory(categoryName)\n    return (\n        <Fragment>\n            <h4 className=\"animate__animated animate__bounce\">{categoryName}   </h4>\n          \n            <LoadingStatus isLoading={loading}/>\n            <div className=\"card-grid\">\n                {images.map(img => <GifGridItem  key={img.id} {...img} />)}\n                \n            </div>\n        </Fragment>\n    )\n}\n\nGifGrid.propTypes = {\n    categoryName: PropTypes.string.isRequired\n}\n\nexport default GifGrid\n","import {useEffect, useState} from 'react'\nimport {getGifs} from \"../helpers/getGifs\"\nexport const useFetchCategory = (category) => {\n\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    })  \n    useEffect(() => {\n        getGifs(category)\n            .then(fetchedData => {\n                setState({data: fetchedData, loading: false})\n            })\n            .catch(err => {\n                setState({loading: false , data: []})\n            })\n\n    } , [category])\n    \n    \n    return state; \n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport GifGrid from './GifGrid'\n\nconst CategoryList = ({categories}) => {\n  \n    return (\n            <div>\n            { \n                categories.map( (category , i )  =>  { \n                    return <GifGrid key={`category_${i  }`} categoryName={category} /> \n                    }).reverse()\n            }\n            </div>\n    )\n}\n\nCategoryList.propTypes = {\n    categories: PropTypes.array.isRequired,\n}\n\nexport default CategoryList\n","import React , {Fragment , useState} from 'react'\nimport AddCategory from './components/AddCategory'\nimport CategoryList from './components/CategoryList'\n\nconst GifExpertApp = () => {\n    const [categories, setCategories] = useState(['Goku' , 'Vegeta' , 'Slam Dunk'])\n    return (\n        <Fragment>\n            <h2>Gif Expert App</h2>\n            <hr/>\n            <AddCategory setCategories={setCategories} />\n            <CategoryList categories={categories} />\n        </Fragment>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'animate.css'\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}